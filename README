========
rdfadict
========

:Date: $LastChangedDate$
:Version: $LastChangedRevision$
:Author: Nathan R. Yergler <nathan@creativecommons.org>
:Organization: `Creative Commons <http://creativecommons.org>`_
:Copyright: 
   2006, Nathan R. Yergler, Creative Commons; 
   licensed to the public under the `MIT license 
   <http://opensource.org/licenses/mit-license.php>`_.

.. contents::

Installation
************

rdfadict and its dependencies may be installed using `easy_install 
<http://peak.telecommunity.com/DevCenter/EasyInstall>`_ (recommended) ::

  $ easy_install rdfadict

or by using the standard distutils setup.py::

  $ python setup.py install

If installing using setup.py, `lxml <http://codespeak.net/lxml>`_ 
will also need to be installed.

Usage
*****

.. admonition:: Document Purpose

     This document is intended to provide a set of literate tests
     for the ``rdfadict`` package; it is **not** intended to provide thorough
     coverage of RDFa syntax or semantics.  See the `RDF Primer 
     <http://www.w3.org/2006/07/SWD/RDFa/primer/>`_ or the `RDFa Syntax 
     <http://www.w3.org/2006/07/SWD/RDFa/syntax/>`_ for details on RDFa.

**rdfadict** parses RDFa metadata encoded in HTML or XHTML documents.  It can
parse a block of text (as a string), or a URL.  For example, given the 
following block of sample text::

  >>> rdfa_sample = """
  ... <div xmlns:dc="http://purl.org/dc/elements/1.1/"
  ...      xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  ... <h1 property="dc:title">Vacation in the South of France</h1>
  ... <h2>created 
  ... by <span property="dc:creator">Mark Birbeck</span>
  ... on <span property="dc:date" type="xsd:date"
  ...          content="2006-01-02">
  ...   January 2nd, 2006
  ...    </span>
  ... </h2>
  ... </div>"""

Triples can be extracted using **rdfadict**::

  >>> import rdfadict
  >>> base_uri = "http://example.com/rdfadict/"
  >>> parser = rdfadict.RdfaParser()
  >>> triples = parser.parsestring(rdfa_sample, base_uri)

We define the variable ``base_uri`` to let the parser know what URI assertions
without subjects apply to.  

Based on our example text, we expect to get three triples back -- title, 
creator and date.  Triple are indexed as a dictionary, first by subject,
then by predicate, finally retuning a ``list`` of objects.  For example, 
a list of all subjects is retrieved using::

  >>> triples.keys()
  ['http://example.com/rdfadict/']

If assertions were made about resources other than the default, those URIs
would appear in this list.  We can verify how many predicates were found
for this subject by accessing the next level of the dictionary::

  >>> len(triples['http://example.com/rdfadict/'].keys())
  3

Finally, we can retrieve the value for the title by fully dereferencing
the dictionary::

  >>> triples['http://example.com/rdfadict/'][
  ...     'http://purl.org/dc/elements/1.1/title']
  ['Vacation in the South of France']

Note that the objects are stored as a list by the default triple sink.

Multiple Assertions
===================

Resolving Statements
====================

When resolving statements, the REL, REV, CLASS and PROPERTY attributes expect
a `CURIE <http://www.w3.org/2001/sw/BestPractices/HTML/2005-10-21-curie>`_, 
while the HREF property expects a URI.  When resolving CURIEs, un-namespaced 
values which are not HTML reserved words (such as license) are ignored to 
prevent "triple bloat".

Given an example::

  >>> rdfa_sample2 = """
  ... <div xmlns:dc="http://purl.org/dc/elements/1.1/"
  ...      xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  ... <h1 property="dc:title">Vacation in the South of France</h1>
  ... <h2>created 
  ... by <span property="dc:creator">Mark Birbeck</span>
  ... on <span property="dc:date" type="xsd:date"
  ...          content="2006-01-02">
  ...   January 2nd, 2006
  ...    </span>
  ... </h2>
  ... <img src="/myphoto.jpg" class="photo" />
  ... (<a href="http://creativecommons.org/licenses/by/3.0/" rel="license"
  ...    about="/myphoto.jpg">CC License</a>)
  ... </div>"""

We can extract RDFa triples from it::

  >>> parser = rdfadict.RdfaParser()
  >>> base_uri2 = "http://example.com/rdfadict/sample2"
  >>> triples = parser.parsestring(rdfa_sample2, base_uri2)

This block of RDFa includes a license statement about another document, the
photo::

  >>> len(triples["http://example.com/myphoto.jpg"])
  1

  >>> triples["http://example.com/myphoto.jpg"].keys()
  ['http://www.w3.org/1999/xhtml#license']
  >>> triples["http://example.com/myphoto.jpg"] \
  ...    ['http://www.w3.org/1999/xhtml#license']
  ['http://creativecommons.org/licenses/by/3.0/']

There are two things to note with respect to this example.  First, the relative
URI for the photo is resolved with respect to the ``base_uri`` value.  Second,
the "class" attribute is not processed, because it's value is not in a 
declared namespace::

  >>> 'photo' in [ n.lower() for n in
  ...      triples['http://example.com/rdfadict/sample2'].keys() ]
  False

See the `RDFa Primer <http://www.w3.org/2006/07/SWD/RDFa/primer/>`_
for more RDFa examples.

Triple Sinks
============

**rdfadict** uses a simple interface (the triple sink) to pass RDF triples
extracted back to some storage mechanism.  A class which acts as a triple
sink only needs to define a single method, ``triple``.  For example::

   class StdOutTripleSink(object):
       """A triple sink which prints out the triples as they are received."""

       def triple(self, subject, predicate, object):
           """Process the given triple."""

           print subject, predicate, object

The default triple sink models the triples as a nested dictionary, 
as described above.  Also included with the package is a list triple sink,
which stores the triples as a list of 3-tuples.  To use a different sink,
pass an instance in as the ``sink`` parameter to either parse method.  For
example::

   >>> parser = rdfadict.RdfaParser()
   >>> list_sink = rdfadict.sink.SimpleTripleSink()
   >>> parser.parsestring(rdfa_sample, base_uri, sink=list_sink)
   [('http://example.com/rdfadict/', 'http://purl.org/dc/elements/1.1/title', 'Vacation in the South of France'), ('http://example.com/rdfadict/', 'http://purl.org/dc/elements/1.1/creator', 'Mark Birbeck'), ('http://example.com/rdfadict/', 'http://purl.org/dc/elements/1.1/date', '2006-01-02')]

   >>> len(list_sink)
   3

Note that the parse method returns the sink used.  Since the sink we're using
is really just a ``list``, the interpreter prints the contents upon return.

Limitations and Known Issues
****************************

**rdfadict** currently does not implement the following areas properly:

* The ``class`` attribute (used to make ``rdf:type`` assertions) is not
  parsed.
* The ``type`` attribute (used to assert the datatype) is not implemented.
* Subject resolution for ``<meta>`` and ``<link>`` tags (which does not 
  traverse up the entire DOM tree) is not correctly implemented.
